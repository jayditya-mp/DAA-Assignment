# Implementation of Merge Sort. TC: O(n log n)
def merge_sort(arr):
    if len(arr) <= 1:
        return arr

    # Find the middle point
    mid = len(arr) // 2

    # Recursively sort the two halves
    left_half = merge_sort(arr[:mid])
    right_half = merge_sort(arr[mid:])

    # Merge the sorted halves
    return merge(left_half, right_half)

def merge(left, right):
    sorted_array = []
    i = j = 0

    # Merge the two lists while maintaining order
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            sorted_array.append(left[i])
            i += 1
        else:
            sorted_array.append(right[j])
            j += 1

    # Add any remaining elements from left
    while i < len(left):
        sorted_array.append(left[i])
        i += 1

    # Add any remaining elements from right
    while j < len(right):
        sorted_array.append(right[j])
        j += 1

    return sorted_array

# Example usage
if __name__ == "__main__":
    array = [38, 25, 42, 31, 9, 82, 10]
    sorted_array = merge_sort(array)
    print("Sorted array:", sorted_array)



Info about using time complexity of given problem :
Time Complexity:
Splitting the array: Every time we split the array in half, it takes 
𝑂(log𝑛)
O(logn) steps since we're dividing the problem in two at each step.
Merging: The merging step at each level of recursion takes 
𝑂(𝑛)
O(n), where 𝑛
n is the size of the array.
Thus, the overall time complexity is 
𝑂(𝑛log⁡𝑛)
O(nlogn).
